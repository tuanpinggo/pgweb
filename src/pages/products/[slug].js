import { StorageKeys } from "@/constants/storage-keys";
import { Stack, Typography } from "@mui/material";
import get from "lodash/get";
import Head from "next/head";
import axios from "axios";
import ProductDetail from "@/components/ui/Products/ProductDetail";
import { ProductType } from "@/constants/products";
import { API_URL } from "@/constants";

const ProductDetailPage = ({ product, ...props }) => {
  return (
    <>
      <Head>
        <title>{product?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Stack spacing={1} minHeight={500} paddingY={"20px"}>
        <ProductDetail product={product} {...props} />
      </Stack>
    </>
  );
};
export async function getServerSideProps({ req, query }) {
  const validated = /^.*-i.[0-9]+$/.test(query?.slug);
  if (!validated) {
    return {
      notFound: true,
    };
  }
  const productId = query?.slug?.split("-i.")?.[1];

  const Client_key = get(req?.cookies, StorageKeys.ClientKey, "robot");
  const token = get(req?.cookies, StorageKeys.Token, "");

  try {
    const response = await axios({
      method: "get",
      url: `${API_URL}/products/${productId}`,
      data: {
        client_key: Client_key,
      },
    });
    const product = response?.data?.data;
    let variants = [];
    if (product?.type === ProductType.Configurable) {
      const res = await axios({
        method: "get",
        url: `${API_URL}/products/${productId}/variants`,
        data: {
          client_key: Client_key,
        },
      });
      variants = res?.data?.data?.variants;
    }

    return {
      props: {
        product,
        isLogined: !!token,
        variants,
      },
    };
  } catch (e) {
    return {
      redirect: {
        destination: "/products",
        permanent: false,
      },
    };
  }
}

export default ProductDetailPage;
